{"ast":null,"code":"import _objectSpread from \"/Users/elyhess/react-portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/elyhess/react-portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elyhess/react-portfolio/src/components/dropZone.jsx\";\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nconst baseStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  padding: '20px',\n  borderWidth: 2,\n  borderRadius: 2,\n  borderColor: '#eeeeee',\n  borderStyle: 'dashed',\n  backgroundColor: '#fafafa',\n  color: '#bdbdbd',\n  transition: 'border .3s ease-in-out'\n};\nconst activeStyle = {\n  borderColor: '#2196f3'\n};\nconst acceptStyle = {\n  borderColor: '#00e676'\n};\nconst rejectStyle = {\n  borderColor: '#ff1744'\n};\n\nfunction DropzoneComponent(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        files = _useState2[0],\n        setFiles = _useState2[1];\n\n  const onDrop = useCallback(acceptedFiles => {\n    setFiles(acceptedFiles.map(file => Object.assign(file, {\n      preview: URL.createObjectURL(file)\n    })));\n  }, []);\n\n  const _useDropzone = useDropzone({\n    onDrop,\n    accept: 'image/jpeg, image/png'\n  }),\n        getRootProps = _useDropzone.getRootProps,\n        getInputProps = _useDropzone.getInputProps,\n        isDragActive = _useDropzone.isDragActive,\n        isDragAccept = _useDropzone.isDragAccept,\n        isDragReject = _useDropzone.isDragReject;\n\n  const style = useMemo(() => _objectSpread({}, baseStyle, {}, isDragActive ? activeStyle : {}, {}, isDragAccept ? acceptStyle : {}, {}, isDragReject ? rejectStyle : {}), [isDragActive, isDragReject, isDragAccept]);\n  const thumbs = files.map(file => React.createElement(\"div\", {\n    key: file.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: file.preview,\n    alt: file.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }))); // clean up\n\n  useEffect(() => () => {\n    files.forEach(file => URL.revokeObjectURL(file.preview));\n  }, [files]);\n  return React.createElement(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"div\", Object.assign({}, getRootProps({\n    style\n  }), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Drag and drop your images here.\")), React.createElement(\"aside\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, thumbs));\n}\n\nexport default DropzoneComponent;","map":{"version":3,"sources":["/Users/elyhess/react-portfolio/src/components/dropZone.jsx"],"names":["React","useCallback","useEffect","useMemo","useState","useDropzone","baseStyle","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","transition","activeStyle","acceptStyle","rejectStyle","DropzoneComponent","props","files","setFiles","onDrop","acceptedFiles","map","file","Object","assign","preview","URL","createObjectURL","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","style","thumbs","name","forEach","revokeObjectURL"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nconst baseStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  padding: '20px',\n  borderWidth: 2,\n  borderRadius: 2,\n  borderColor: '#eeeeee',\n  borderStyle: 'dashed',\n  backgroundColor: '#fafafa',\n  color: '#bdbdbd',\n  transition: 'border .3s ease-in-out'\n};\n\nconst activeStyle = {\n  borderColor: '#2196f3'\n};\n\nconst acceptStyle = {\n  borderColor: '#00e676'\n};\n\nconst rejectStyle = {\n  borderColor: '#ff1744'\n};\n\nfunction DropzoneComponent(props) {\n  const [files, setFiles] = useState([]);\n\n  const onDrop = useCallback(acceptedFiles => {\n    setFiles(acceptedFiles.map(file => Object.assign(file, {\n      preview: URL.createObjectURL(file)\n    })));\n  }, []);\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({\n    onDrop,\n    accept: 'image/jpeg, image/png'\n  });\n\n  const style = useMemo(() => ({\n    ...baseStyle,\n    ...(isDragActive ? activeStyle : {}),\n    ...(isDragAccept ? acceptStyle : {}),\n    ...(isDragReject ? rejectStyle : {})\n  }), [\n    isDragActive,\n    isDragReject,\n    isDragAccept\n  ]);\n\n  const thumbs = files.map(file => (\n    <div key={file.name}>\n      <img\n        src={file.preview}\n        alt={file.name}\n      />\n    </div>\n  ));\n\n  // clean up\n  useEffect(() => () => {\n    files.forEach(file => URL.revokeObjectURL(file.preview));\n  }, [files]);\n\n  return (\n    <section>\n      <div {...getRootProps({style})}>\n        <input {...getInputProps()} />\n        <div>Drag and drop your images here.</div>\n      </div>\n      <aside>\n        {thumbs}\n      </aside>\n    </section>\n  )\n}\n\nexport default DropzoneComponent;"]},"metadata":{},"sourceType":"module"}